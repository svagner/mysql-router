# Copyright (c) 2010, 2017, Oracle and/or its affiliates. All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

SET(CMAKE_BINARY_DIR "@CMAKE_BINARY_DIR@")
SET(CMAKE_CURRENT_SOURCE_DIR "@CMAKE_CURRENT_SOURCE_DIR@")
SET(CANDLE_EXECUTABLE "@CANDLE_EXECUTABLE@")
SET(LIGHT_EXECUTABLE "@LIGHT_EXECUTABLE@")
SET(CMAKE_COMMAND "@CMAKE_COMMAND@")
SET(CMAKE_CFG_INTDIR "@CMAKE_CFG_INTDIR@")
SET(VERSION "@PROJECT_VERSION@")
SET(MAJOR_VERSION "@PROJECT_VERSION_MAJOR@")
SET(MINOR_VERSION "@PROJECT_VERSION_MINOR@")
SET(PATCH_VERSION "@PROJECT_VERSION_PATCH@")
SET(CMAKE_SIZEOF_VOID_P @CMAKE_SIZEOF_VOID_P@)
SET(MANUFACTURER "Oracle Corporation")
SET(WIXCA_LOCATION "@WIXCA_LOCATION@")
SET(COPYING_RTF "@COPYING_RTF@")
SET(CPACK_WIX_CONFIG "@CPACK_WIX_CONFIG@")
SET(CPACK_WIX_INCLUDE "@CPACK_WIX_INCLUDE@")
SET(PRODUCT_NAME "MySQL Router")
SET(PRODUCT_DESCRIPTION "MySQL Router")
SET(UPGRADE_ID "9FC37322-7617-4205-B7BD-F72C30EF101A")
SET(UPGRADE_CODE "9FC37322-7617-4205-B7BD-F72C30EF101A")
SET(GPL "@GPL@")

#LIST(APPEND EXCLUDE_DIRS
     #scripts
#)

#LIST(APPEND EXCLUDE_FILES
#)


IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
  SET(Win64 " Win64='yes'")
  SET(Platform x64)
  SET(PlatformProgramFilesFolder ProgramFiles64Folder)
ELSE()
  SET(Platform x86)
  SET(PlatformProgramFilesFolder ProgramFilesFolder)
  SET(Win64 " Win64='no'")
ENDIF()

SET(ENV{VS_UNICODE_OUTPUT})

INCLUDE(${CMAKE_BINARY_DIR}/CPackConfig.cmake)

IF(CPACK_WIX_CONFIG)
  INCLUDE(${CPACK_WIX_CONFIG})
ENDIF()

IF(NOT CPACK_WIX_UI)
  SET(CPACK_WIX_UI "WixUI_Minimal_Custom")
ENDIF()

SET(WIX_FEATURES)
FOREACH(comp ${CPACK_COMPONENTS_ALL})
 STRING(TOUPPER "${comp}" comp_upper)
 IF(NOT CPACK_COMPONENT_${comp_upper}_GROUP)
   SET(WIX_FEATURE_${comp_upper}_COMPONENTS "${comp}")
   SET(CPACK_COMPONENT_${comp_upper}_HIDDEN 1)
   SET(CPACK_COMPONENT_GROUP_${comp_upper}_DISPLAY_NAME ${CPACK_COMPONENT_${comp_upper}_DISPLAY_NAME})
   SET(CPACK_COMPONENT_GROUP_${comp_upper}_DESCRIPTION ${CPACK_COMPONENT_${comp_upper}_DESCRIPTION})
   SET(CPACK_COMPONENT_GROUP_${comp_upper}_WIX_LEVEL ${CPACK_COMPONENT_${comp_upper}_WIX_LEVEL})
   SET(WIX_FEATURES ${WIX_FEATURES} WIX_FEATURE_${comp_upper})
 ELSE()
   SET(FEATURE_NAME WIX_FEATURE_${CPACK_COMPONENT_${comp_upper}_GROUP})
   SET(WIX_FEATURES ${WIX_FEATURES} ${FEATURE_NAME})
   LIST(APPEND ${FEATURE_NAME}_COMPONENTS ${comp})
 ENDIF()
ENDFOREACH()

IF(WIFX_FEATURES)
  LIST(REMOVE_DUPLICATES WIX_FEATURES)
ELSE()
  SET(WIX_FEATURES DefaultFeature)
ENDIF()

SET(CPACK_WIX_FEATURES)

FOREACH(f ${WIX_FEATURES})
 STRING(TOUPPER "${f}" f_upper)
 STRING(REPLACE "WIX_FEATURE_" "" f_upper ${f_upper})
 IF (CPACK_COMPONENT_GROUP_${f_upper}_DISPLAY_NAME)
  SET(TITLE ${CPACK_COMPONENT_GROUP_${f_upper}_DISPLAY_NAME})
 ELSE()
  SET(TITLE  CPACK_COMPONENT_GROUP_${f_upper}_DISPLAY_NAME)
 ENDIF()

 IF (CPACK_COMPONENT_GROUP_${f_upper}_DESCRIPTION)
  SET(DESCRIPTION ${CPACK_COMPONENT_GROUP_${f_upper}_DESCRIPTION})
 ELSE()
  SET(DESCRIPTION CPACK_COMPONENT_GROUP_${f_upper}_DESCRIPTION)
 ENDIF()
 IF(CPACK_COMPONENT_${f_upper}_WIX_LEVEL)
   SET(Level ${CPACK_COMPONENT_${f_upper}_WIX_LEVEL})
 ELSE()
   SET(Level 1)
 ENDIF()
 IF(CPACK_COMPONENT_GROUP_${f_upper}_HIDDEN)
   SET(DISPLAY "Display='hidden'")
   SET(TITLE ${f_upper})
   SET(DESCRIPTION ${f_upper})
 ELSE()
   SET(DISPLAY)
   IF(CPACK_COMPONENT_GROUP_${f_upper}_EXPANDED)
    SET(DISPLAY "Display='expand'")
   ENDIF()
   IF (CPACK_COMPONENT_GROUP_${f_upper}_DISPLAY_NAME)
    SET(TITLE ${CPACK_COMPONENT_GROUP_${f_upper}_DISPLAY_NAME})
   ELSE()
     SET(TITLE  CPACK_COMPONENT_GROUP_${f_upper}_DISPLAY_NAME)
   ENDIF()
   IF (CPACK_COMPONENT_GROUP_${f_upper}_DESCRIPTION)
     SET(DESCRIPTION ${CPACK_COMPONENT_GROUP_${f_upper}_DESCRIPTION})
   ELSE()
     SET(DESCRIPTION CPACK_COMPONENT_GROUP_${f_upper}_DESCRIPTION)
   ENDIF()
 ENDIF()

 SET(CPACK_WIX_FEATURES
 "${CPACK_WIX_FEATURES}
   <Feature  Id='${f_upper}'
     Title='${TITLE}'
     Description='${DESCRIPTION}'
     ConfigurableDirectory='INSTALLDIR'
     Level='${Level}' ${DISPLAY} >"
  )
 FOREACH(c ${${f}_COMPONENTS})
   STRING(TOUPPER "${c}" c_upper)
   IF (CPACK_COMPONENT_${c_upper}_DISPLAY_NAME)
    SET(TITLE ${CPACK_COMPONENT_${c_upper}_DISPLAY_NAME})
   ELSE()
    SET(TITLE CPACK_COMPONENT_${c_upper}_DISPLAY_NAME)
   ENDIF()

   IF (CPACK_COMPONENT_${c_upper}_DESCRIPTION)
     SET(DESCRIPTION ${CPACK_COMPONENT_${c_upper}_DESCRIPTION})
   ELSE()
     SET(DESCRIPTION CPACK_COMPONENT_${c_upper}_DESCRIPTION)
   ENDIF()
   IF(CPACK_COMPONENT_${c_upper}_WIX_LEVEL)
    SET(Level ${CPACK_COMPONENT_${c_upper}_WIX_LEVEL})
   ELSE()
    SET(Level 1)
   ENDIF()
   IF(CPACK_COMPONENT_${c_upper}_HIDDEN)
   SET(CPACK_WIX_FEATURES
   "${CPACK_WIX_FEATURES}
     <ComponentGroupRef Id='componentgroup.${c}'/>")
   ELSE()
   SET(CPACK_WIX_FEATURES
   "${CPACK_WIX_FEATURES}
    <Feature Id='${c}'
       Title='${TITLE}'
       Description='${DESCRIPTION}'
       ConfigurableDirectory='INSTALLDIR'
       Level='${Level}'>
       <ComponentGroupRef Id='componentgroup.${c}'/>
    </Feature>")
  ENDIF()

  ENDFOREACH()
   SET(CPACK_WIX_FEATURES
   "${CPACK_WIX_FEATURES}
   </Feature>
   ")
ENDFOREACH()


SET(CPACK_WIX_FEATURES
"${CPACK_WIX_FEATURES}
  <Feature Id='DefaultFeature' Level='1'>
    <ComponentGroupRef Id='AllFiles'/>
  </Feature>
"
 )

IF(CMAKE_INSTALL_CONFIG_NAME)
  STRING(REPLACE "${CMAKE_CFG_INTDIR}" "${CMAKE_INSTALL_CONFIG_NAME}"
    WIXCA_LOCATION "${WIXCA_LOCATION}")
  SET(CONFIG_PARAM "-DCMAKE_INSTALL_CONFIG_NAME=${CMAKE_INSTALL_CONFIG_NAME}")
ENDIF()


# FOREACH(comp ${CPACK_COMPONENTS_ALL})
#  SET(ENV{DESTDIR} testinstall/${comp})
#  SET(DIRS ${DIRS} testinstall/${comp})
#  EXECUTE_PROCESS(
#   COMMAND ${CMAKE_COMMAND} ${CONFIG_PARAM} -DCMAKE_INSTALL_COMPONENT=${comp}
#    -DCMAKE_INSTALL_PREFIX=  -P ${CMAKE_BINARY_DIR}/cmake_install.cmake
#    OUTPUT_QUIET
#   )
# ENDFOREACH()

MACRO(GENERATE_GUID VarName)
 EXECUTE_PROCESS(COMMAND uuidgen -c
 OUTPUT_VARIABLE ${VarName}
 OUTPUT_STRIP_TRAILING_WHITESPACE)
ENDMACRO()

SET(INC_VAR 0)
MACRO(MAKE_WIX_IDENTIFIER str varname)
  STRING(REPLACE "/" "." ${varname} "${str}")
  STRING(REGEX REPLACE "[^a-zA-Z_0-9.]" "_" ${varname} "${${varname}}")
  STRING(LENGTH "${${varname}}" len)
  # Identifier should be smaller than 72 character
  # We have to cut down the length to 70 chars, since we add 2 char prefix
  # pretty often
  IF(len GREATER 70)
   STRING(SUBSTRING  "${${varname}}" 0 67 shortstr)
   MATH(EXPR INC_VAR ${INC_VAR}+1)
   SET(${varname} "${shortstr}${INC_VAR}")
  ENDIF()
ENDMACRO()


FUNCTION(TRAVERSE_FILES dir topdir file file_comp  dir_root)
  FILE(RELATIVE_PATH dir_rel ${topdir} ${dir})
  IF(dir_rel)
    LIST(FIND EXCLUDE_DIRS ${dir_rel} TO_EXCLUDE)
    IF(NOT TO_EXCLUDE EQUAL -1)
      MESSAGE(STATUS "excluding directory: ${dir_rel}")
      RETURN()
    ENDIF()
  ENDIF()
  FILE(GLOB all_files ${dir}/*)
  IF(NOT all_files)
    RETURN()
  ENDIF()
  IF(dir_rel)
   MAKE_DIRECTORY(${dir_root}/${dir_rel})
   MAKE_WIX_IDENTIFIER("${dir_rel}" id)
   SET(DirectoryRefId  "D.${id}")
  ELSE()
   SET(DirectoryRefId "INSTALLDIR")
  ENDIF()
  FILE(APPEND ${file} "<DirectoryRef Id='${DirectoryRefId}'>\n")
  MESSAGE(OUTPUT "${file} --- ${all_files}")
  SET(NONEXEFILES)
  FOREACH(f ${all_files})
    IF(NOT IS_DIRECTORY ${f})
      FILE(RELATIVE_PATH rel ${topdir} ${f})
      SET(TO_EXCLUDE)
      IF(rel MATCHES "\\.pdb$" OR rel MATCHES "\\.conf$" OR rel MATCHES "\\.ini$")
        SET(TO_EXCLUDE TRUE)
      ELSE()
        LIST(FIND EXCLUDE_FILES ${rel} RES)
        IF(NOT RES EQUAL -1)
          SET(TO_EXCLUDE TRUE)
        ENDIF()
      ENDIF()
      IF(TO_EXCLUDE)
        MESSAGE(STATUS "excluding file: ${rel}")
      ELSE()
	      MAKE_WIX_IDENTIFIER("${rel}" id)
        FILE(TO_NATIVE_PATH ${f} f_native)
        IF("${rel}" MATCHES "lib/harness-library.dll" OR "${rel}" MATCHES ".ilk" OR
           "${rel}" MATCHES "lib/bad_one.dll" OR "${rel}" MATCHES "lib/bad_two.dll" OR
           "${rel}" MATCHES "lib/example.dll" OR "${rel}" MATCHES "lib/magic.dll")
          # ignore /lib version of harness-library (it is on bin folder already)
          # also ignore .ilk files and a bunch of DLLs that are useful for testing only.
        ELSE()
	        GET_FILENAME_COMPONENT(f_ext "${f}" EXT)
      	  # According to MSDN each DLL or EXE should be in the own component
        	IF(f_ext MATCHES ".exe" OR f_ext MATCHES ".dll")
        	  FILE(APPEND ${file} "  <Component Id='C.${id}' Guid='*' ${Win64}>\n")
        	  FILE(APPEND ${file} "    <File Id='F.${id}' KeyPath='yes' Source='${f_native}'/>\n")
      	    FILE(APPEND ${file} "  </Component>\n")
        	  FILE(APPEND ${file_comp} "  <ComponentRef Id='C.${id}'/>\n")
          ELSE()
            SET(NONEXEFILES  "${NONEXEFILES}\n<File Id='F.${id}' Source='${f_native}'/>" )
          ENDIF()
        ENDIF()
      ENDIF()
    ENDIF()
  ENDFOREACH()
  FILE(APPEND ${file} "</DirectoryRef>\n")
  IF(NONEXEFILES)
    GENERATE_GUID(guid)
    SET(ComponentId "C._files_${COMP_NAME}.${DirectoryRefId}")
    FILE(APPEND ${file}
    "<DirectoryRef Id='${DirectoryRefId}'>\n<Component Guid='${guid}' Id='${ComponentId}' ${Win64}>${NONEXEFILES}\n</Component></DirectoryRef>\n")
	FILE(APPEND ${file_comp} "  <ComponentRef Id='${ComponentId}'/>\n")
  ENDIF()
  FOREACH(f ${all_files})
    IF(IS_DIRECTORY ${f})
      TRAVERSE_FILES(${f} ${topdir} ${file} ${file_comp}  ${dir_root})
    ENDIF()
  ENDFOREACH()
ENDFUNCTION()

FUNCTION(TRAVERSE_DIRECTORIES dir topdir file prefix)
  FILE(RELATIVE_PATH rel ${topdir} ${dir})
  IF(rel)
    MAKE_WIX_IDENTIFIER("${rel}" id)
    GET_FILENAME_COMPONENT(name ${dir} NAME)
    FILE(APPEND ${file} "${prefix}<Directory Id='D.${id}' Name='${name}'>\n")
  ENDIF()
  FILE(GLOB all_files ${dir}/*)
  FOREACH(f ${all_files})
    IF(IS_DIRECTORY ${f})
      TRAVERSE_DIRECTORIES(${f} ${topdir} ${file} "${prefix}  ")
    ENDIF()
  ENDFOREACH()
  IF(rel)
    FILE(APPEND ${file} "${prefix}</Directory>\n")
  ENDIF()
ENDFUNCTION()

SET(COMP_NAME AllFiles)
GET_FILENAME_COMPONENT(abs . ABSOLUTE)
FOREACH(d ${CMAKE_BINARY_DIR}/stage/${CMAKE_INSTALL_CONFIG_NAME})
  GET_FILENAME_COMPONENT(d ${d} ABSOLUTE)
  GET_FILENAME_COMPONENT(d_name ${d} NAME)

  TRAVERSE_FILES(${d} ${d} ${abs}/all_components.wxs ${abs}/all_component_group.wxs "${CMAKE_BINARY_DIR}/stage")
ENDFOREACH()


FILE(READ all_components.wxs CPACK_WIX_COMPONENTS)
FILE(REMOVE all_components.wxs)

FILE(READ all_component_group.wxs WIX_TMP)
SET(CPACK_WIX_COMPONENT_GROUPS "<ComponentGroup Id='AllFiles'>\n${WIX_TMP}\n</ComponentGroup>")
FILE(REMOVE all_component_group.wxs)

FILE(WRITE directories.wxs "<DirectoryRef Id='INSTALLDIR'>\n")
TRAVERSE_DIRECTORIES(${CMAKE_BINARY_DIR}/stage/${CMAKE_INSTALL_CONFIG_NAME} ${CMAKE_BINARY_DIR}/stage/${CMAKE_INSTALL_CONFIG_NAME} directories.wxs "")
FILE(APPEND directories.wxs "</DirectoryRef>\n")

FILE(READ directories.wxs CPACK_WIX_DIRECTORIES)
FILE(REMOVE directories.wxs)

FOREACH(src ${CPACK_WIX_INCLUDE})
SET(CPACK_WIX_INCLUDES
"${CPACK_WIX_INCLUDES}
 <?include ${src}?>"
)
ENDFOREACH()

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/mysql_router.wxs.in
 ${CMAKE_CURRENT_BINARY_DIR}/mysql_router.wxs)

SET(EXTRA_CANDLE_ARGS)
IF("$ENV{EXTRA_CANDLE_ARGS}")
	SET(EXTRA_CANDLE_ARGS "$ENV{EXTRA_CANDLE_ARGS}")
ENDIF()

SET(EXTRA_LIGHT_ARGS)
IF("$ENV{EXTRA_LIGHT_ARGS}")
	SET(EXTRA_LIGHT_ARGS "$ENV{EXTRA_LIGHT_ARGS}")
ENDIF()

FILE(REMOVE mysql_router.wixobj)
EXECUTE_PROCESS(
 COMMAND "${CANDLE_EXECUTABLE}" -nologo -v -ext WixUtilExtension  mysql_router.wxs ${EXTRA_CANDLE_ARGS}
 RESULT_VARIABLE CANDLE_RESULT
 OUTPUT_VARIABLE CANDLE_OUTPUT
 ERROR_VARIABLE CANDLE_OUTPUT
)

IF(CANDLE_RESULT)
	MESSAGE(FATAL_ERROR "ERROR: can't run ${CANDLE_EXECUTABLE}: ${CANDLE_RESULT} ${CANDLE_OUTPUT}")
ENDIF()

EXECUTE_PROCESS(
 COMMAND "${LIGHT_EXECUTABLE}" -ext WixUIExtension -ext WixUtilExtension
  -v -nologo
  mysql_router.wixobj  -out  ${CMAKE_BINARY_DIR}/${CPACK_PACKAGE_FILE_NAME}.msi
  ${EXTRA_LIGHT_ARGS}
 RESULT_VARIABLE LIGHT_RESULT
 OUTPUT_VARIABLE LIGHT_OUTPUT
 ERROR_VARIABLE LIGHT_OUTPUT
)

IF(LIGHT_RESULT)
	MESSAGE(FATAL_ERROR "ERROR: can't run ${LIGHT_EXECUTABLE}: ${LIGHT_RESULT} ${LIGHT_OUTPUT}")
ENDIF()
